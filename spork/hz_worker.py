from collections.abc import Iterator
import json
import logging
import shlex
from subprocess import Popen, PIPE, check_call
import sys
import os

import reduce_util as ru

WORKER_FILENAME = 'workers.txt'
CLOUD_USERNAME = 'ec2-user'
KEYPAIR_FILE = 'hazsoup.pem'

class CloudBase:
    """Base class for using an ec2 cloud.
    """
    def __init__(self):
        """Loads worker names from workers.txt
        """
        self.worker_file = WORKER_FILENAME
        self.cloud_username = CLOUD_USERNAME
        self.keypair_file = 'hazsoup.pem'
        try:
            with open(self.worker_file) as fp:
                self.workers = [
                    worker.rstrip() for worker in fp.readlines()]
        except FileNotFoundError:
            print(f'warning: no config at {worker_file}')
            self.workers = None

    def ssh_args(self) -> str:
        """Arguments for an ssh command invoking the worker.
        """
        return (f'-i {self.keypair_file} -o StrictHostKeyChecking=no'
                + f' -l {self.cloud_username}')

    def scp_args(self) -> str:
        """Arguments for an scp command invoking the worker.
        """
        return (f'-i {self.keypair_file} -o StrictHostKeyChecking=no')


class Worker(CloudBase):
    """An abstract worker for map-reduce tasks.
    """

    # abstract routines to be implemented by subclasses

    def map(self, x):
        """Yield one or more items. 
        """
        assert False, unimplemented

    def reduce(self, key, values: Iterator):
        """Yield one or more items to be associated with the key.
        """
        assert False, 'unimplemented'


    def do_map(self, src, dst):
        """Invoked from command line for map-only jobs.
        """
        with open(dst, 'w') as fp:
            for line in open(src):
                for x in self.map(line):
                    fp.write(str(x) + '\n')

    def _shard_bufname(self, src, worker_idx):
        """Name of a single output shard from a worker.
        """
        stem = os.path.basename(src)
        return f'sortout-{stem}-from-w{worker_idx:02d}.tsv'

    def do_map_and_shuffle(self, src, this_worker):
        """Run mapper on src and distribute shards to co-workers. 

        Distributed shards are sorted by key.
        """
        coworkers = self.workers
        # set up destination processes - using shell=True to allow
        # LC_ALL=C options to sort to be passed in
        def sort_pipe_command_str(worker):
            dst = self._shard_bufname(src, coworkers.index(this_worker))
            result = f'ssh {self.ssh_args()} {worker} LC_ALL=C sort -k1 -o {dst}'
            return result
        sample_command = sort_pipe_command_str(coworkers[0])
        logging.info(f'sample command: {sample_command}')
        coworker_processes = [
            Popen(
                sort_pipe_command_str(worker),
                text=True, stderr=PIPE, stdin=PIPE, shell=True)
            for worker in coworkers
        ]
        # run the map and distribute the data to the processes
        # TODO: something here is maybe broken....
        for line in open(src):
            for key, val in self.map(line):
                key_worker_idx = ru.kv_keyhash(key) % len(coworkers)                
                kv_line = ru.kv_to_line(key, val)
                coworker_processes[key_worker_idx].stdin.write(kv_line)
        # close the worker processes and echo any errors
        for proc, worker in zip(coworker_processes, coworkers):
            proc.stdin.close()
            proc.wait()
            if proc.returncode:
                print(f'returncode {worker}: {proc.returncode}')
            error_log = proc.stderr.read()
            if error_log:
                print(f'stderr {worker}'.center(60, '='))
                print(error_log, end='')
        
    def do_gather_reduce(self, src, dst, worker_file):
        """Merge shards generated by do_map_and_shuffle and then reduce.
        """
        coworkers = self.workers
        
        # merge-sort the generated shards using sort with -m option
        incoming_shards = [
            self._shard_bufname(src, i) for i in range(len(coworkers))]
        stem = os.path.basename(src)
        merge_dst =  f'mergeout-{stem}.tsv'
        merge_sort_cmd = (f'LC_ALL=C sort -k1 -o {merge_dst} '
                          + ' '.join(incoming_shards))
        check_call(merge_sort_cmd, shell=True)

        # create a generator for the sorted pairs 
        def pair_generator():
            for line in open(merge_dst):
                yield ru.kv_from_line(line)

        # convert pair_generator and invoke and save reduce outputs
        with open(dst, 'w') as fp:
            for key, values in ru.ReduceReady(pair_generator()):
                for reduced_value in self.reduce(key, values):
                    pair = (key, reduced_value)
                    fp.write(str(pair) + '\n')
