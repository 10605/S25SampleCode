class Worker:
    """An abstract worker for map-reduce tasks.
    """

    # abstract routines to be implemented by instances via worker.map
    # and then executed by commands like

    # py -m fire hs_wc.py MyWorker do_map SRC DST

    def do_map(self, src, dst):
        """
        """
        with open(dst, 'w') as fp:
            for line in open(src):
                for x in self.map(line):
                    fp.write(x + '\n')

    def map(self, x):
        """Yield one or more items. 

        Map will be called repeatedly and outputs will be sent to the
        reducer in a map-reduce, or else serialized and written out to
        the destination file for a map-only job.
        """
        assert False, unimplemented

    # TODO
    def scatter_keyed_shards(self, src_worker_name, src, dst, workers):
        """Shard src by key, and send shards to workers for sorting by key.

        Names of shards are {dst}-from-{src_worker_name} so they
        can be collected.
        """
        ...
        
    # TODO
    def do_gather_reduce(self, src, dst, workers):
        """Merge shards generated by scatter_keyed_shards and reduce.

        Specifically, merge labeled {src}-from-{worker}, and stream
        the output of that sort process to the self.reduce(key,
        values).
        """
        ...

    def reduce(self, accum, value2, initial_accum=lambda x:x):
        """
        """
        assert False, 'unimplemented'
